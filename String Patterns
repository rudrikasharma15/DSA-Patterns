ðŸŒŸ String DSA Patterns
Author: Rudrika Sharma

ðŸ§© STRING PATTERNS (with Examples)
1. Two Pointers
For comparing or modifying characters from both ends of a string.

ðŸ”¹ Examples:

isPalindrome â†’ Check if a string reads the same forwards and backwards

reverseVowels â†’ Reverse only vowels in a string

validPalindrome â†’ Can become a palindrome by removing at most one character

2. Sliding Window
Use when substring length or conditions over a window of characters matter.

ðŸ”¹ Examples:

Longest Substring Without Repeating Characters

Minimum Window Substring

Permutation in String

3. Expand Around Center
Efficient way to detect all palindromic substrings.

ðŸ”¹ Examples:

Longest Palindromic Substring

Count Palindromic Substrings

4. Stack-Based String Manipulation
Useful when characters are added/removed based on dynamic conditions.

ðŸ”¹ Examples:

Remove All Adjacent Duplicates â†’ "abbaca" â†’ "ca"

Decode String â†’ "3[a2[c]]" â†’ "accaccacc"

Remove K Digits â†’ "1432219" â†’ "1219"

5. HashMap / Frequency Count
When tracking characters or their frequency is necessary.

ðŸ”¹ Examples:

Valid Anagram

Group Anagrams

Isomorphic Strings

First Unique Character

6. Sorting Based
When lexicographical order or frequency-based sorting is needed.

ðŸ”¹ Examples:

Remove Duplicate Letters

Reorganize String

Sort Characters By Frequency

7. Trie / Prefix Based (Advanced)
For efficient prefix searching or dictionary-based problems.

ðŸ”¹ Examples:

Longest Word in Dictionary

Replace Words

Word Search II

8. Dynamic Programming on Strings
For optimal solutions where subproblems involve substring comparison.

ðŸ”¹ Examples:

Longest Common Subsequence

Edit Distance

Longest Palindromic Subsequence

